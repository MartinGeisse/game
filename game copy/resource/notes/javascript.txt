
- wie greifen JS-Behaviors auf Java-Behaviors zu?
	- Falls keine Lösung: Sollten Java-Behaviors überhaupt benutzt werden?
	- Events wären auch hier möglich, aber dann müssen die Java-Behaviors
		das unterstützen.
			- Sollen vllt auch Java-Behaviors mit Events kommunizieren?
				Das würde auch bei denen entkoppeln, was ja gewünscht ist.

- wie greifen Java-Behaviors auf JS-Behaviors zu?
	- Soll das überhaupt passieren? JS liefert Customizazion, Java das
	Standardverhalten.
	- Events sind auf jeden Fall möglich, falls diese unterstützt werden.

- wie kommunizieren JS-Behaviors?
	Events bieten sich an -- das muss nur unterstützt werden.
		Unklar, wer der Emitter ist -- GameObject oder Behavior?
		GameObject wäre intuitiv richtig, allerdings gibt das ggf. Naming-Konflikte
		bei den Event Keys. Die kann man aber genauso lösen wie bei Klassennamen (FQ name)
			- Wie wird das sonst bei Node.js gemacht?
			--> scheint bei Node sonst kein Problem zu sein.
			--> also events mit "core." prefix und allgemein FQ name
	Klassen gibt es nicht, allerdings kann man sich die behaviors holen und deren
	Methoden aufrufen. Das wäre aber weniger schon als Events:
		1. Bindet es die Behavior-Klassen aneinander; Events entkoppeln.
			-> nachlesen, ob das das Prinzip von Events in JS/Node.js ist.
		2. Bietet es keine neue Funktionalität.
	--> events sind schöner

- Was ist der Key für das Behavior? Klassen gibt es nicht!
	Vllt sind Keys gar nicht mehr nötig, wenn die Behaviors über Events
	kommunizieren!
	- Dann sind aber Features wieder interessant, z.B. SpriteProvider!
		- Wobei der Provider hier auch kein "obtain behavior by class" war,
			sondern der Provier war ein Parameter für ein Behavior. Das kann
			man auch weiterhin so machen, wobei in JS der Parameter eine
			Funktion und kein Objekt wäre.
	-->
	Erst mal sowas als Parameter lösen wie bisher beim SpriteProvider, und wenn
	das Problem wirklich auftritt dann lösen.

- Wie werden behaviors definiert?
	Wo stehen die JS-Dateien?
	Was wird durch eine Datei definiert?
	Entspricht der Toplevel-Code dem moduleInit(), dem behaviorInit(), ...?
	Node.js würde sagen: Wie Node-Module! Code entspricht moduleInit() und
	exportiert Funktionen (z.B. Behavior-Konstruktoren), die durch das
	Modul auch einen Namespace erhalten.
		Node.js: Wenn ein Modul mehrfach required wird, gibt es das dann auch
		mehrfach oder nur 1x?
		-
		Normal gibt es das Modul dann nur 1x, aber:
		http://justjs.com/posts/singletons-in-node-js-modules-cannot-be-trusted-or-why-you-can-t-just-do-var-foo-require-baz-init
	-->
	Wo stehen die JS-Dateien?
		In Modul-Ordnern, wie bei Node.js
	Was wird durch eine Datei definiert?
		Ein Modul.
	Entspricht der Toplevel-Code dem moduleInit(), dem behaviorInit(), ...?
		moduleInit() mit Exports.
	--
	Sinvollerweise würde das Spiel einen Ordner benutzen, in dem die JS-Dateien
	stehen. Dieser würde dann einem Node-Projekt entsprechend. Z.B. würde ein
	Unterordner node_modules durch npm angelegt. evtl gibt es auch eine app.js
	die vom Java-Code geladen wird.
	--
	Builtin-Module können aber auch vom Java-Code bereitgestellt werden. Ansonsten
	könnte ein Projekt nicht einfach eine Java-Lib (u.a. die Core-Lib) einbinden
	und deren Node-Module benutzen, sondern müsste diese per NPM installieren,
	obwohl der Java-Code schon aus dem Projekt kommt. NPM würde also nur benutzt,
	um reine JS-Module nachzuinstallieren.
	--
	Dann muss eine Nashorn-basierte Implementierung vom Node-Module-System her.
	Problem: Nashorn != Node. Das bedeutet auch, dass z.B. das async()-Modul
	und andere nicht "einfach so" laufen werden.
	--
	Node-Port auf Nashorn: https://avatar.java.net/
		(Heißt Avatar, weil der Name "Node" rechtlich bedenklich wäre)
		Projekt ist tot.
	--
	Das heißt: Im Spiel-Projekt wäre JS machbar, aber kein Node.js. Das wäre
	evtl nicht so schlimm, weil Node.js nicht so vieles bietet, was man im
	Spiel brauchen kann. Bibliotheken wie async könnte man vermutlich mit
	wenig Aufwand portieren; NPM wäre bedingt übertragbar wenn man das
	Modulsystem kompatibel machen kann.
	--
	Machbar wäre also:
	- JS aber kein Node fürs Scripting
	- kein JS, aber das Async-Modell in Java übernehmen.
		--> das wäre schon eher denkbar

- Wie werden Game Objects erzeugt?
	new Game.Object(behavior1, behavior2, behaviorArray, ...)
	Alle Behaviors werden bei Erzeugung festgestellt.
	Dependencies:
		- Variante #1: Behaviors können Dependencies angeben
			wie? und wie stellt man duplikate fest, die man dann nur 1x braucht?
		- Variante #2: Behaviors können andere Behaviors require()n (auch später?)
			wie? und wie stellt man duplikate fest, die man dann nur 1x braucht?
		- Variante #3: Behaviors müssen alle angegeben werden
			--> doof, weil man dann für "fertige" Spieleobjekte (z.B. Standard-Gegner X)
			ein neues Konzept braucht statt nur ein Behavior mit Dependencies.
			Dependencies sind hier sogar flexibler, weil man einen Standardgegner X
			mit Extra-Behaviors kombinieren kann.	
	

- Wenn Behaviors nicht mehr ihre Klasse als Key haben -- was vermutlich sinnvoll ist, vor allem bei JS -- dann stellt sich
	die Frage, wie man sie dynamisch removen kann. Beispiel wäre ein "burning" behavior mit Flammen-Effekt und DOT.
	--> Idee: Die Behaviors werden einfach als Liste gespeichert. Dann kann man Objekte aufgrund ihrer Identität removen.
	--> Set wäre von der Überlegung her auch gut, besser sogar als Liste, aber Listen haben reproduzierbares Verhalten
		in Bezug auf die Reihenfolge, was das DEbugging bei Reihenfolgen-abhängigen PRoblemen einfacher macht.
